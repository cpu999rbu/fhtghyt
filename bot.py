import telebot
from telebot.types import (InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton)
import random
import string
import time
import threading
import json

TOKEN = "8152061099:AAE5k3IricRRWn-OuYnkkG8cJf1WS0utLps"
bot = telebot.TeleBot(TOKEN)

# ---------------------------------------------------------------------------------
# –í–º–µ—Å—Ç–æ bad_words –∏ censor_text ‚Äì —Ä–µ–∞–ª–∏–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.
def moderate_text(text):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    # –ü–æ–∫–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ severity = 0.
    return text, 0

def get_ban_duration(severity):
    if severity == 1:
        return 10 * 60
    elif severity == 2:
        return 15 * 60
    elif severity == 3:
        return 30 * 60
    elif severity == 4:
        return 60 * 60
    elif severity == 5:
        return 3 * 60 * 60
    return 10 * 60

# ---------------------------------------------------------------------------------
# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_coins = {}           # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 0)
user_roles = {}           # –†–æ–ª–∏: "user", "admin", "banned"
waiting_for_username = {} # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "About user")
waiting_for_message = {}  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Ç, –æ—Ç–≤–µ—Ç—ã)
waiting_for_input = {}    # –î–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–º–æ–∫–æ–¥—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä.)
waiting_for_transfer = {}             # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–∏–Ω–æ–≤ (–∫–ª—é—á ‚Äì sender_id)
waiting_for_transfer_question = {}    # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É (–∫–ª—é—á ‚Äì –ø–æ–ª—É—á–∞—Ç–µ–ª—å)

admin_id = 2120919981     # –û—Å–Ω–æ–≤–Ω–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
promo_codes = {}          # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã

# –ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
click_value = 1         # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ Click
last_click_time = {}      # –î–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ –∫–ª–∏–∫–æ–≤ (user_id: –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª–∏–∫–∞)
transfer_block = {}       # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id: bool)
autoclickers = {}         # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id: bool)
heavy_load = False        # –§–ª–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏

# ---------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
def check_load(user_id):
    global heavy_load
    if heavy_load:
        bot.send_message(user_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ!")
        time.sleep(1)

# –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ä–µ–∑ JSON)
def save_data():
    data = {
        "user_coins": user_coins,
        "user_roles": user_roles,
        "promo_codes": promo_codes,
    }
    try:
        with open("data.json", "w") as f:
            json.dump(data, f)
        print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e)

def load_data():
    global user_coins, user_roles, promo_codes
    try:
        with open("data.json", "r") as f:
            data = json.load(f)
            user_coins = data.get("user_coins", {})
            user_roles = data.get("user_roles", {})
            promo_codes = data.get("promo_codes", {})
        print("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)

# ---------------------------------------------------------------------------------
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu(user_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("Click"), KeyboardButton("Users online"), KeyboardButton("Balance"))
    markup.row(KeyboardButton("About your account"), KeyboardButton("About user"))
    markup.row(KeyboardButton("Chat"))
    markup.row(KeyboardButton("Create promo code"), KeyboardButton("Activate promo code"))
    markup.row(KeyboardButton("Transfer coins"))
    markup.row(KeyboardButton("Rules"))
    if user_roles.get(user_id, "user") == "admin" or user_id == admin_id:
        markup.row(KeyboardButton("Settings"))
    markup.row(KeyboardButton("User Settings"))
    markup.row(KeyboardButton("Autoclicker (ON-OFF)"))
    markup.row(KeyboardButton("Reset all"))
    return markup

# ---------------------------------------------------------------------------------
# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.chat.id
    if user_id not in user_coins:
        user_coins[user_id] = 0
        user_roles[user_id] = "user"
    if user_roles[user_id] == "banned":
        bot.send_message(user_id, "–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    main_menu = get_main_menu(user_id)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# ---------------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (Reply Keyboard)
@bot.message_handler(func=lambda message: message.text in [
    "Click", "Users online", "About your account", "About user", "Chat",
    "Create promo code", "Activate promo code", "Balance", "Rules",
    "Settings", "Reset all", "Transfer coins", "User Settings", "Autoclicker (ON-OFF)"
])
def main_menu_handler(message):
    user_id = message.chat.id
    check_load(user_id)
    text = message.text
    if user_roles.get(user_id) == "banned":
        bot.send_message(user_id, "–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return

    if text == "Click":
        current_time = time.time()
        if user_id in last_click_time and current_time - last_click_time[user_id] < 1:
            bot.send_message(user_id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ!")
            return
        last_click_time[user_id] = current_time
        user_coins[user_id] += click_value
        bot.send_message(user_id, f"üü¢ {message.from_user.first_name} –Ω–∞–∂–∞–ª Click! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user_coins[user_id]} –∫–æ–∏–Ω–æ–≤.")
    elif text == "Users online":
        online_users = len([uid for uid in user_roles if user_roles[uid] != "banned"])
        bot.send_message(user_id, f"–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω: {online_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    elif text == "About your account":
        bot.send_message(user_id, f"–¢–≤–æ–π ID: {user_id}\n–ö–æ–∏–Ω—ã: {user_coins[user_id]}\n–°—Ç–∞—Ç—É—Å: {user_roles[user_id]}")
    elif text == "Balance":
        bot.send_message(user_id, f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_coins[user_id]} –∫–æ–∏–Ω–æ–≤")
    elif text == "About user":
        waiting_for_username[user_id] = "info"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    elif text == "Reset all":
        user_coins[user_id] = 0
        bot.send_message(user_id, "üîÑ –í—Å–µ –∫–æ–∏–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã!")
    elif text == "Chat":
        markup = InlineKeyboardMarkup()
        for uid in user_roles:
            if user_roles[uid] != "banned":
                markup.add(InlineKeyboardButton(f"{uid}", callback_data=f"chat_{uid}"))
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=markup)
    elif text == "Create promo code":
        waiting_for_input[user_id] = "coins"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:", reply_markup=markup)
    elif text == "Activate promo code":
        waiting_for_input[user_id] = "promo_code"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", reply_markup=markup)
    elif text == "Settings":
        if user_roles.get(user_id) == "admin" or user_id == admin_id:
            waiting_for_input[user_id] = "settings_pending"
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("–ü–æ–≤—ã—Å–∏—Ç—å —é–∑–µ—Ä–∞ –¥–æ –∞–¥–º–∏–Ω–∞", callback_data="set_promote"))
            markup.row(InlineKeyboardButton("–ü–æ–Ω–∏–∑–∏—Ç—å —é–∑–µ—Ä–∞ –¥–æ —é–∑–µ—Ä–∞", callback_data="set_demote"))
            markup.row(InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞", callback_data="set_ban"))
            markup.row(InlineKeyboardButton("–†–∞–∑–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞", callback_data="set_unban"))
            markup.row(InlineKeyboardButton("Reset coins", callback_data="set_reset"))
            markup.row(InlineKeyboardButton("Get User Info", callback_data="get_user_info"))
            markup.row(InlineKeyboardButton("Send message", callback_data="send_message"))
            markup.row(InlineKeyboardButton("Save data", callback_data="save_data"),
                       InlineKeyboardButton("Load data", callback_data="load_data"))
            markup.row(InlineKeyboardButton("Cancel", callback_data="cancel"))
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif text == "Transfer coins":
        markup = InlineKeyboardMarkup()
        for uid in user_roles:
            if uid != user_id and user_roles[uid] != "banned":
                if transfer_block.get(uid, False):
                    continue
                markup.add(InlineKeyboardButton(f"{uid}", callback_data=f"transfer_{uid}"))
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–∏–Ω–æ–≤:", reply_markup=markup)
    elif text == "User Settings":
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("Set click", callback_data="set_click"))
        markup.row(InlineKeyboardButton("Block transfer for all", callback_data="block_transfer"))
        markup.row(InlineKeyboardButton("Unblock transfer for all", callback_data="unblock_transfer"))
        markup.row(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    elif text == "Autoclicker (ON-OFF)":
        if autoclickers.get(user_id, False):
            autoclickers[user_id] = False
            bot.send_message(user_id, "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω.")
        else:
            autoclickers[user_id] = True
            bot.send_message(user_id, "–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä –≤–∫–ª—é—á–µ–Ω.")
            threading.Thread(target=autoclicker_thread, args=(user_id,), daemon=True).start()

# –§–æ–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def autoclicker_thread(user_id):
    while autoclickers.get(user_id, False):
        time.sleep(0.1)
        user_coins[user_id] += 1
        try:
            bot.send_message(user_id, f"–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä: +1 –∫–æ–∏–Ω, —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user_coins[user_id]} –∫–æ–∏–Ω–æ–≤.")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–µ:", e)

# ---------------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline‚Äë–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.message.chat.id
    check_load(user_id)
    if user_roles.get(user_id) == "banned":
        bot.answer_callback_query(call.id, "–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    data = call.data

    if data.startswith("chat_"):
        target_user = int(data.split("_")[1])
        waiting_for_message[user_id] = target_user
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    elif data.startswith("reply_"):
        sender_id = call.message.chat.id
        receiver_id = int(data.split("_")[1])
        waiting_for_message[sender_id] = receiver_id
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(sender_id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=markup)
    elif data.startswith("transfer_") and not data.startswith("transfer_send") and not data.startswith("transfer_accept") and not data.startswith("transfer_decline") and not data.startswith("transfer_question"):
        target_user = int(data.split("_")[1])
        waiting_for_transfer[user_id] = {"target": target_user}
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=markup)
    elif data.startswith("transfer_send_"):
        sender_id = int(data.replace("transfer_send_", ""))
        if sender_id in waiting_for_transfer:
            req = waiting_for_transfer[sender_id]
            if req.get("target") == call.message.chat.id:
                amount = req.get("amount", 0)
                if user_coins.get(sender_id, 0) >= amount:
                    user_coins[sender_id] -= amount
                    user_coins[call.message.chat.id] += amount
                    bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –∫–æ–∏–Ω–æ–≤.")
                    bot.send_message(sender_id, f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –∫–æ–∏–Ω–æ–≤ –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}.")
                else:
                    bot.send_message(call.message.chat.id, "–£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            else:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.")
            waiting_for_transfer.pop(sender_id, None)
    elif data.startswith("transfer_accept_"):
        sender_id = int(data.replace("transfer_accept_", ""))
        if sender_id in waiting_for_transfer:
            req = waiting_for_transfer[sender_id]
            if req.get("target") == call.message.chat.id:
                amount = req.get("amount", 0)
                if user_coins.get(sender_id, 0) >= amount:
                    user_coins[sender_id] -= amount
                    user_coins[call.message.chat.id] += amount
                    bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –∫–æ–∏–Ω–æ–≤.")
                    bot.send_message(sender_id, f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –∫–æ–∏–Ω–æ–≤ –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}.")
                else:
                    bot.send_message(call.message.chat.id, "–£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            else:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.")
            waiting_for_transfer.pop(sender_id, None)
    elif data.startswith("transfer_decline_"):
        sender_id = int(data.replace("transfer_decline_", ""))
        if sender_id in waiting_for_transfer:
            bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
            bot.send_message(sender_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.")
            waiting_for_transfer.pop(sender_id, None)
    elif data.startswith("transfer_question_"):
        sender_id = int(data.replace("transfer_question_", ""))
        waiting_for_transfer_question[call.message.chat.id] = sender_id
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=markup)
    elif data == "exit_rules":
        bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª.")
    # –î–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    elif data == "set_promote":
        waiting_for_input[user_id] = "settings_promote"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ –∞–¥–º–∏–Ω–∞:", reply_markup=markup)
    elif data == "set_demote":
        waiting_for_input[user_id] = "settings_demote"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —é–∑–µ—Ä–∞:", reply_markup=markup)
    elif data == "set_ban":
        waiting_for_input[user_id] = "settings_ban_id"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:", reply_markup=markup)
    elif data == "set_unban":
        waiting_for_input[user_id] = "settings_unban"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è:", reply_markup=markup)
    elif data == "set_reset":
        waiting_for_input[user_id] = "settings_reset"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–∏–Ω–æ–≤:", reply_markup=markup)
    # –ù–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    elif data == "get_user_info":
        markup = InlineKeyboardMarkup()
        for uid in user_coins:
            markup.add(InlineKeyboardButton(f"User {uid}", callback_data=f"user_info_{uid}"))
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    elif data.startswith("user_info_"):
        target = int(data.replace("user_info_", ""))
        info = f"ID: {target}\n–ö–æ–∏–Ω—ã: {user_coins.get(target, 0)}\n–°—Ç–∞—Ç—É—Å: {user_roles.get(target, 'user')}"
        bot.send_message(user_id, info)
    elif data == "send_message":
        markup = InlineKeyboardMarkup()
        for uid in user_coins:
            markup.add(InlineKeyboardButton(f"User {uid}", callback_data=f"admin_msg_{uid}"))
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=markup)
    elif data.startswith("admin_msg_"):
        target = int(data.replace("admin_msg_", ""))
        waiting_for_input[user_id] = ("admin_send_message", target)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=markup)
    elif data == "save_data":
        save_data()
        bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    elif data == "load_data":
        load_data()
        bot.send_message(user_id, "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    # –î–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (User Settings)
    elif data == "set_click":
        waiting_for_input[user_id] = "set_click"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–ü–æ—Å—Ç–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞ (–æ—Ç 0.5 –¥–æ 2):", reply_markup=markup)
    elif data == "block_transfer":
        transfer_block[user_id] = True
        bot.send_message(user_id, "–ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    elif data == "unblock_transfer":
        transfer_block[user_id] = False
        bot.send_message(user_id, "–ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.")
    elif data == "cancel":
        waiting_for_input.pop(user_id, None)
        waiting_for_message.pop(user_id, None)
        waiting_for_transfer.pop(user_id, None)
        bot.send_message(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# ---------------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
@bot.message_handler(func=lambda message: message.chat.id in waiting_for_message,
                     content_types=["text", "photo", "video", "audio", "document", "voice", "sticker"])
def handle_chat_message(message):
    user_id = message.chat.id
    current_time = time.time()
    if user_id in chat_ban_until and current_time < chat_ban_until[user_id]:
        ban_remaining = int(chat_ban_until[user_id] - current_time)
        bot.send_message(user_id, f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —á–∞—Ç–µ –Ω–∞ {ban_remaining // 60} –º–∏–Ω—É—Ç(—ã).")
        waiting_for_message.pop(user_id, None)
        return
    target_id = waiting_for_message[user_id]
    if message.content_type == "text":
        original_text = message.text
        moderated_text, severity = moderate_text(original_text)
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}"))
        bot.send_message(target_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {moderated_text}", reply_markup=markup)
    else:
        try:
            bot.forward_message(target_id, message.chat.id, message.message_id)
        except Exception as e:
            bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    waiting_for_message.pop(user_id, None)

# ---------------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ (–ø—Ä–æ–º–æ–∫–æ–¥—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä.)
@bot.message_handler(func=lambda message: message.chat.id in waiting_for_input, content_types=["text"])
def handle_input(message):
    user_id = message.chat.id
    action = waiting_for_input[user_id]
    user_input = message.text
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    if action == "coins":
        try:
            coins = int(user_input)
            if coins > user_coins[user_id]:
                bot.send_message(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞!")
                return
            waiting_for_input[user_id] = ("users", coins)
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=markup)
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    elif isinstance(action, tuple) and action[0] == "users":
        try:
            users_limit = int(user_input)
            waiting_for_input[user_id] = ("expiration", action[1], users_limit)
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:", reply_markup=markup)
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    elif isinstance(action, tuple) and action[0] == "expiration":
        try:
            expiration_minutes = int(user_input)
            expiration_time = time.time() + expiration_minutes * 60
            coins_value = action[1]
            users_limit = action[2]
            promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            promo_codes[promo_code] = {
                "coins": coins_value,
                "limit": users_limit,
                "creator": user_id,
                "expires": expiration_time
            }
            user_coins[user_id] -= coins_value * users_limit
            bot.send_message(user_id, f"–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n**–ö–æ–¥:** {promo_code}\n**–õ–∏–º–∏—Ç:** {users_limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                      f"**–ö–æ–∏–Ω—ã:** {coins_value} –Ω–∞ –∫–∞–∂–¥–æ–≥–æ\n**–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** {expiration_minutes} –º–∏–Ω—É—Ç.")
            waiting_for_input.pop(user_id)
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    elif action == "promo_code":
        if user_input in promo_codes:
            promo = promo_codes[user_input]
            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥
            if promo["creator"] == user_id:
                bot.send_message(user_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥!")
                waiting_for_input.pop(user_id)
                return
            current_time = time.time()
            if current_time > promo["expires"]:
                bot.send_message(user_id, "–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç—ë–∫.")
                promo_codes.pop(user_input)
                waiting_for_input.pop(user_id)
                return
            if promo["limit"] > 0 and user_coins[promo["creator"]] >= promo["coins"]:
                user_coins[user_id] += promo["coins"]
                user_coins[promo["creator"]] -= promo["coins"]
                promo["limit"] -= 1
                bot.send_message(user_id, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ {promo['coins']} –∫–æ–∏–Ω–æ–≤.")
                bot.send_message(promo["creator"], f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {promo['limit']}.")
                if promo["limit"] == 0:
                    promo_codes.pop(user_input)
            else:
                bot.send_message(user_id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        else:
            bot.send_message(user_id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        waiting_for_input.pop(user_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    elif action == "settings_promote":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            user_roles[target] = "admin"
            bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∞.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        waiting_for_input.pop(user_id)
    elif action == "settings_demote":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            user_roles[target] = "user"
            bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —é–∑–µ—Ä–∞.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        waiting_for_input.pop(user_id)
    elif action == "settings_ban_id":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            waiting_for_input[user_id] = ("settings_ban", target)
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    elif isinstance(action, tuple) and action[0] == "settings_ban" and len(action) == 2:
        target = action[1]
        reason = user_input
        waiting_for_input[user_id] = ("settings_ban", target, reason)
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 –º–∏–Ω—É—Ç', '2 —á–∞—Å–∞', '1 –¥–µ–Ω—å'):")
    elif isinstance(action, tuple) and action[0] == "settings_ban" and len(action) == 3:
        target = action[1]
        reason = action[2]
        parts = user_input.split()
        if len(parts) < 2:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 –º–∏–Ω—É—Ç').")
            return
        try:
            number = int(parts[0])
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        unit = parts[1].lower()
        if unit.startswith("–º–∏–Ω—É—Ç"):
            duration = number * 60
        elif unit.startswith("—á–∞—Å"):
            duration = number * 3600
        elif unit.startswith("–¥–µ–Ω—å"):
            duration = number * 86400
        elif unit.startswith("–º–µ—Å—è—Ü"):
            duration = number * 30 * 86400
        elif unit.startswith("–≥–æ–¥"):
            duration = number * 365 * 86400
        else:
            duration = number * 60
        user_roles[target] = "banned"
        chat_ban_until[target] = time.time() + duration
        duration_text = f"{number} {unit}"
        bot.send_message(target, f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ '{reason}' –Ω–∞ {duration_text}.")
        bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ '{reason}' –Ω–∞ {duration_text}.")
        waiting_for_input.pop(user_id)
    elif action == "settings_unban":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            user_roles[target] = "user"
            bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        waiting_for_input.pop(user_id)
    elif action == "settings_reset":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            user_coins[target] = 0
            bot.send_message(user_id, f"–ö–æ–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} —Å–±—Ä–æ—à–µ–Ω—ã.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        waiting_for_input.pop(user_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (User Settings)
    elif action == "set_click":
        try:
            new_value = float(user_input)
            if 0.5 <= new_value <= 2:
                global click_value
                click_value = new_value
                bot.send_message(user_id, f"–ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {click_value}.")
            else:
                bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.5 –¥–æ 2.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        waiting_for_input.pop(user_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif isinstance(action, tuple) and action[0] == "admin_send_message":
        target = action[1]
        text_to_send = user_input
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"admin_reply_{user_id}_{target}"))
        markup.row(InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–ü—Ä–æ—á–∏—Ç–∞–Ω–æ)", callback_data=f"admin_status_{user_id}_{target}"))
        markup.row(InlineKeyboardButton("–ò–≥–Ω–æ—Ä", callback_data=f"admin_ignore_{user_id}_{target}"))
        bot.send_message(target, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ ({user_id}) —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{text_to_send}", reply_markup=markup)
        bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        waiting_for_input.pop(user_id)

# ---------------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–∏–Ω–æ–≤
@bot.message_handler(func=lambda message: message.chat.id in waiting_for_transfer and "amount" not in waiting_for_transfer[message.chat.id])
def handle_transfer_amount(message):
    user_id = message.chat.id
    try:
        amount = int(message.text)
        if amount <= 0:
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
        if user_coins[user_id] < amount:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
            waiting_for_transfer.pop(user_id, None)
            return
        waiting_for_transfer[user_id]["amount"] = amount
        target = waiting_for_transfer[user_id]["target"]
        sender_name = message.from_user.first_name or str(user_id)
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–º—É –∫–æ–∏–Ω—ã", callback_data=f"transfer_send_{user_id}"))
        markup.row(InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–∏–Ω—ã", callback_data=f"transfer_decline_{user_id}"))
        markup.row(InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ–º—É", callback_data=f"transfer_question_{user_id}"),
                   InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"transfer_accept_{user_id}"))
        bot.send_message(target, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_name} (ID: {user_id}) —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞–º {amount} –∫–æ–∏–Ω–æ–≤.", reply_markup=markup)
        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# ---------------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
@bot.message_handler(func=lambda message: message.chat.id in waiting_for_transfer_question, content_types=["text"])
def handle_transfer_question(message):
    receiver_id = message.chat.id
    sender_id = waiting_for_transfer_question[receiver_id]
    question = message.text
    bot.send_message(sender_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {receiver_id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {question}")
    bot.send_message(receiver_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    waiting_for_transfer_question.pop(receiver_id, None)

# ---------------------------------------------------------------------------------
bot.polling()

import telebot
from telebot.types import (InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton)
import random
import string
import time
import re

TOKEN = "8152061099:AAE5k3IricRRWn-OuYnkkG8cJf1WS0utLps"
bot = telebot.TeleBot(TOKEN)

# ------------------ –ú–µ—Ö–∞–Ω–∏–∑–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö —Å–ª–æ–≤ ------------------
bad_words = {
    "–±–ª–∏–Ω": 1, "–ë–ª–∏–Ω": 1, "–±–õ–∏–Ω": 1,
    "—Ö—Ä–µ–Ω": 1, "–•—Ä–µ–Ω": 1,
    "–¥—É—Ä–∞–∫": 1, "–î—É—Ä–∞–∫": 1,
    "–∏–¥–∏–æ—Ç": 2, "–ò–¥–∏–æ—Ç": 2,
    "–∫—Ä–µ—Ç–∏–Ω": 2, "–ö—Ä–µ—Ç–∏–Ω": 2,
    "—É–±–ª—é–¥–æ–∫": 3, "–£–±–ª—é–¥–æ–∫": 3,
    "—Å—É–∫–∞": 4, "–°—É–∫–∞": 4,
    "–ø–∏–∑–¥–µ—Ü": 5, "–ü–∏–∑–¥–µ—Ü": 5,
    "—Ö—É–π": 5, "–•—É–π": 5,
    "—Ö—É–µ—Å–æ—Å": 5, "–•—É–µ—Å–æ—Å": 5
}

user_warnings = {}   # { user_id: warning_count }
chat_ban_until = {}  # { user_id: ban_end_timestamp }

def censor_text(text):
    max_severity = 0

    def replace_func(match):
        word = match.group(0)
        severity = bad_words.get(word, 0)
        nonlocal max_severity
        if severity > max_severity:
            max_severity = severity
        return word[0] + "*" * (len(word)-1)

    pattern = re.compile(r'\b(' + '|'.join(map(re.escape, bad_words.keys())) + r')\b', re.IGNORECASE)
    censored = pattern.sub(replace_func, text)
    return censored, max_severity

def get_ban_duration(severity):
    if severity == 1:
        return 10 * 60
    elif severity == 2:
        return 15 * 60
    elif severity == 3:
        return 30 * 60
    elif severity == 4:
        return 60 * 60
    elif severity == 5:
        return 3 * 60 * 60
    return 10 * 60

# -------------- –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π --------------
user_coins = {}           # –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 0)
user_roles = {}           # –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ("user", "admin", "banned")
waiting_for_username = {} # –î–ª—è –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "About user")
waiting_for_message = {}  # –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–∞—Ç, –æ—Ç–≤–µ—Ç—ã)
waiting_for_input = {}    # –î–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–º–æ–∫–æ–¥—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç.–¥.)
waiting_for_transfer = {}             # –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–æ–Ω–µ—Ç; –∫–ª—é—á ‚Äì sender_id, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì dict —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
waiting_for_transfer_question = {}    # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É: –∫–ª—é—á ‚Äì –ø–æ–ª—É—á–∞—Ç–µ–ª—å, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì sender_id

admin_id = 2120919981     # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
promo_codes = {}          # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤

# -------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é --------------------
def get_main_menu(user_id):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("Click"), KeyboardButton("Users online"), KeyboardButton("Balance"))
    markup.row(KeyboardButton("About your account"), KeyboardButton("About user"))
    markup.row(KeyboardButton("Chat"))
    markup.row(KeyboardButton("Create promo code"), KeyboardButton("Activate promo code"))
    markup.row(KeyboardButton("Transfer coins"))
    markup.row(KeyboardButton("Rules"))
    if user_id == admin_id:
        markup.row(KeyboardButton("Settings"))
    markup.row(KeyboardButton("Reset all"))
    return markup

# ---------------- –ö–æ–º–∞–Ω–¥–∞ /start ----------------
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.chat.id
    if user_id not in user_coins:
        user_coins[user_id] = 0
        user_roles[user_id] = "user"
    if user_roles[user_id] == "banned":
        bot.send_message(user_id, "–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    main_menu = get_main_menu(user_id)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# ---------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é (Reply Keyboard) ----------------
@bot.message_handler(func=lambda message: message.text in [
    "Click", "Users online", "About your account", "About user", "Chat",
    "Create promo code", "Activate promo code", "Balance", "Rules", "Settings", "Reset all", "Transfer coins"
])
def main_menu_handler(message):
    user_id = message.chat.id
    text = message.text
    if user_roles.get(user_id) == "banned":
        bot.send_message(user_id, "–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if text == "Click":
        user_coins[user_id]  += 1
        bot.send_message(user_id, f"üü¢ {message.from_user.first_name} –Ω–∞–∂–∞–ª Click! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user_coins[user_id]} –∫–æ–∏–Ω–æ–≤.")
    elif text == "Users online":
        online_users = len([uid for uid in user_roles if user_roles[uid] != "banned"])
        bot.send_message(user_id, f"–°–µ–π—á–∞—Å –æ–Ω–ª–∞–π–Ω: {online_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    elif text == "About your account":
        bot.send_message(user_id, f"–¢–≤–æ–π ID: {user_id}\n–ö–æ–∏–Ω—ã: {user_coins[user_id]}\n–°—Ç–∞—Ç—É—Å: {user_roles[user_id]}")
    elif text == "Balance":
        bot.send_message(user_id, f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_coins[user_id]} –∫–æ–∏–Ω–æ–≤")
    elif text == "About user":
        waiting_for_username[user_id] = "info"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    elif text == "Reset all":
        user_coins[user_id] = 0
        bot.send_message(user_id, "üîÑ –í—Å–µ –∫–æ–∏–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã!")
    elif text == "Chat":
        markup = InlineKeyboardMarkup()
        for uid in user_roles:
            if user_roles[uid] != "banned":
                markup.add(InlineKeyboardButton(f"{uid}", callback_data=f"chat_{uid}"))
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=markup)
    elif text == "Create promo code":
        waiting_for_input[user_id] = "coins"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞:", reply_markup=markup)
    elif text == "Activate promo code":
        waiting_for_input[user_id] = "promo_code"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", reply_markup=markup)
    elif text == "Settings":
        if user_id == admin_id:
            waiting_for_input[user_id] = "settings_pending"
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("–ü–æ–≤—ã—Å–∏—Ç—å —é–∑–µ—Ä–∞ –¥–æ –∞–¥–º–∏–Ω–∞", callback_data="set_promote"))
            markup.row(InlineKeyboardButton("–ü–æ–Ω–∏–∑–∏—Ç—å —é–∑–µ—Ä–∞ –¥–æ —é–∑–µ—Ä–∞", callback_data="set_demote"))
            markup.row(InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞", callback_data="set_ban"))
            markup.row(InlineKeyboardButton("–†–∞–∑–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞", callback_data="set_unban"))
            markup.row(InlineKeyboardButton("Reset coins", callback_data="set_reset"))
            markup.row(InlineKeyboardButton("Cancel", callback_data="cancel"))
            bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
        else:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    elif text == "Transfer coins":
        markup = InlineKeyboardMarkup()
        for uid in user_roles:
            if uid != user_id and user_roles[uid] != "banned":
                markup.add(InlineKeyboardButton(f"{uid}", callback_data=f"transfer_{uid}"))
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–∏–Ω–æ–≤:", reply_markup=markup)
    elif text == "Rules":
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Exit", callback_data="exit_rules"))
        bot.send_message(user_id, "–ü—Ä–∞–≤–∏–ª–∞:\n"
                                  "–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞, –º–∞—Ç—ã ‚Äì –±–∞–Ω –æ—Ç 10 –º–∏–Ω—É—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n"
                                  "–°–ø–∞–º ‚Äì –±–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π).\n"
                                  "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –±–æ—Ç–∞-–∫–ª–∏–∫–µ—Ä–∞ ‚Äì –±–∞–Ω (–Ω–∞ –ª—é–±–æ–µ –≤—Ä–µ–º—è).", reply_markup=markup)

# ---------------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ ----------------
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.message.chat.id
    if user_roles.get(user_id) == "banned":
        bot.answer_callback_query(call.id, "–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return
    if call.data.startswith("chat_"):
        target_user = int(call.data.split("_")[1])
        waiting_for_message[user_id] = target_user
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    elif call.data.startswith("reply_"):
        sender_id = call.message.chat.id
        receiver_id = int(call.data.split("_")[1])
        waiting_for_message[sender_id] = receiver_id
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(sender_id, "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=markup)
    elif call.data.startswith("transfer_"):
        target_user = int(call.data.split("_")[1])
        waiting_for_transfer[user_id] = {"target": target_user}
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=markup)
    elif call.data.startswith("transfer_send_"):
        sender_id = int(call.data.replace("transfer_send_", ""))
        if sender_id in waiting_for_transfer:
            req = waiting_for_transfer[sender_id]
            if req.get("target") == call.message.chat.id:
                amount = req.get("amount", 0)
                if user_coins.get(sender_id, 0) >= amount:
                    user_coins[sender_id] -= amount
                    user_coins[call.message.chat.id] += amount
                    bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –∫–æ–∏–Ω–æ–≤.")
                    bot.send_message(sender_id, f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –∫–æ–∏–Ω–æ–≤ –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}.")
                else:
                    bot.send_message(call.message.chat.id, "–£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            else:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.")
            waiting_for_transfer.pop(sender_id, None)
    elif call.data.startswith("transfer_accept_"):
        sender_id = int(call.data.replace("transfer_accept_", ""))
        if sender_id in waiting_for_transfer:
            req = waiting_for_transfer[sender_id]
            if req.get("target") == call.message.chat.id:
                amount = req.get("amount", 0)
                if user_coins.get(sender_id, 0) >= amount:
                    user_coins[sender_id] -= amount
                    user_coins[call.message.chat.id] += amount
                    bot.send_message(call.message.chat.id, f"–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –∫–æ–∏–Ω–æ–≤.")
                    bot.send_message(sender_id, f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} –∫–æ–∏–Ω–æ–≤ –ø—Ä–∏–Ω—è—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}.")
                else:
                    bot.send_message(call.message.chat.id, "–£ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
            else:
                bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.")
            waiting_for_transfer.pop(sender_id, None)
    elif call.data.startswith("transfer_decline_"):
        sender_id = int(call.data.replace("transfer_decline_", ""))
        if sender_id in waiting_for_transfer:
            bot.send_message(call.message.chat.id, "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
            bot.send_message(sender_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.chat.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.")
            waiting_for_transfer.pop(sender_id, None)
    elif call.data.startswith("transfer_question_"):
        sender_id = int(call.data.replace("transfer_question_", ""))
        waiting_for_transfer_question[call.message.chat.id] = sender_id
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", reply_markup=markup)
    elif call.data == "exit_rules":
        bot.send_message(user_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª.")
    # –î–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    elif call.data == "set_promote":
        waiting_for_input[user_id] = "settings_promote"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ –∞–¥–º–∏–Ω–∞:", reply_markup=markup)
    elif call.data == "set_demote":
        waiting_for_input[user_id] = "settings_demote"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —é–∑–µ—Ä–∞:", reply_markup=markup)
    elif call.data == "set_ban":
        # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å ID, –ø–æ—Ç–æ–º –ø—Ä–∏—á–∏–Ω—É, –ø–æ—Ç–æ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        waiting_for_input[user_id] = "settings_ban_id"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:", reply_markup=markup)
    elif call.data == "set_unban":
        waiting_for_input[user_id] = "settings_unban"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∏–≤–∞–Ω–∏—è:", reply_markup=markup)
    elif call.data == "set_reset":
        waiting_for_input[user_id] = "settings_reset"
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–∏–Ω–æ–≤:", reply_markup=markup)
    elif call.data == "cancel":
        waiting_for_input.pop(user_id, None)
        waiting_for_message.pop(user_id, None)
        waiting_for_transfer.pop(user_id, None)
        bot.send_message(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏ ----------------
@bot.message_handler(func=lambda message: message.chat.id in waiting_for_message)
def handle_chat_message(message):
    user_id = message.chat.id
    current_time = time.time()
    if user_id in chat_ban_until and current_time < chat_ban_until[user_id]:
        ban_remaining = int(chat_ban_until[user_id] - current_time)
        bot.send_message(user_id, f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —á–∞—Ç–µ –Ω–∞ {ban_remaining // 60} –º–∏–Ω—É—Ç(—ã).")
        waiting_for_message.pop(user_id, None)
        return
    original_text = message.text
    censored_text, severity = censor_text(original_text)
    if severity > 0:
        user_warnings[user_id] = user_warnings.get(user_id, 0) + 1
        warnings = user_warnings[user_id]
        bot.send_message(user_id, f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings} –∏–∑ 3.")
        if warnings >= 3:
            ban_duration = get_ban_duration(severity)
            chat_ban_until[user_id] = time.time() + ban_duration
            bot.send_message(user_id, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–∞–Ω –≤ —á–∞—Ç–µ –Ω–∞ {ban_duration // 60} –º–∏–Ω—É—Ç(—ã) –∑–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É.")
            waiting_for_message.pop(user_id, None)
            return
    receiver_id = waiting_for_message[user_id]
    bot.send_message(receiver_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {censored_text}",
                     reply_markup=InlineKeyboardMarkup().add(
                         InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")
                     ))
    waiting_for_message.pop(user_id, None)

# ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–º–æ–∫–æ–¥—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä.) ----------------
@bot.message_handler(func=lambda message: message.chat.id in waiting_for_input)
def handle_input(message):
    user_id = message.chat.id
    action = waiting_for_input[user_id]
    user_input = message.text
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    if action == "coins":
        try:
            coins = int(user_input)
            if coins > user_coins[user_id]:
                bot.send_message(user_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞!")
                return
            waiting_for_input[user_id] = ("users", coins)
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=markup)
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    elif isinstance(action, tuple) and action[0] == "users":
        try:
            users_limit = int(user_input)
            waiting_for_input[user_id] = ("expiration", action[1], users_limit)
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("Cancel", callback_data="cancel"))
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:", reply_markup=markup)
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    elif isinstance(action, tuple) and action[0] == "expiration":
        try:
            expiration_minutes = int(user_input)
            expiration_time = time.time() + expiration_minutes * 60
            coins_value = action[1]
            users_limit = action[2]
            promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            promo_codes[promo_code] = {
                "coins": coins_value,
                "limit": users_limit,
                "creator": user_id,
                "expires": expiration_time
            }
            user_coins[user_id] -= coins_value * users_limit
            bot.send_message(user_id, f"–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n**–ö–æ–¥:** {promo_code}\n**–õ–∏–º–∏—Ç:** {users_limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                      f"**–ö–æ–∏–Ω—ã:** {coins_value} –Ω–∞ –∫–∞–∂–¥–æ–≥–æ\n**–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** {expiration_minutes} –º–∏–Ω—É—Ç.")
            waiting_for_input.pop(user_id)
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    elif action == "promo_code":
        if user_input in promo_codes:
            promo = promo_codes[user_input]
            current_time = time.time()
            if current_time > promo["expires"]:
                bot.send_message(user_id, "–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç—ë–∫.")
                promo_codes.pop(user_input)
                waiting_for_input.pop(user_id)
                return
            if promo["limit"] > 0 and user_coins[promo["creator"]] >= promo["coins"]:
                user_coins[user_id] += promo["coins"]
                user_coins[promo["creator"]] -= promo["coins"]
                promo["limit"] -= 1
                bot.send_message(user_id, f"–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ {promo['coins']} –∫–æ–∏–Ω–æ–≤.")
                bot.send_message(promo["creator"], f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {promo['limit']}.")
                if promo["limit"] == 0:
                    promo_codes.pop(user_input)
            else:
                bot.send_message(user_id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        else:
            bot.send_message(user_id, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        waiting_for_input.pop(user_id)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    elif action == "settings_promote":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            user_roles[target] = "admin"
            bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –ø–æ–≤—ã—à–µ–Ω –¥–æ –∞–¥–º–∏–Ω–∞.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        waiting_for_input.pop(user_id)
    elif action == "settings_demote":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            user_roles[target] = "user"
            bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –ø–æ–Ω–∏–∂–µ–Ω –¥–æ –æ–±—ã—á–Ω–æ–≥–æ —é–∑–µ—Ä–∞.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        waiting_for_input.pop(user_id)
    # –ù–æ–≤—ã–π –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –±–∞–Ω–∞:
    elif action == "settings_ban_id":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            waiting_for_input[user_id] = ("settings_ban", target)
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞:")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    elif isinstance(action, tuple) and action[0] == "settings_ban" and len(action) == 2:
        target = action[1]
        reason = user_input
        waiting_for_input[user_id] = ("settings_ban", target, reason)
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '10 –º–∏–Ω—É—Ç', '2 —á–∞—Å–∞', '1 –¥–µ–Ω—å'):")
    elif isinstance(action, tuple) and action[0] == "settings_ban" and len(action) == 3:
        target = action[1]
        reason = action[2]
        parts = user_input.split()
        if len(parts) < 2:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, '10 –º–∏–Ω—É—Ç'.")
            return
        try:
            number = int(parts[0])
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        unit = parts[1].lower()
        if unit.startswith("–º–∏–Ω—É—Ç"):
            duration = number * 60
        elif unit.startswith("—á–∞—Å"):
            duration = number * 3600
        elif unit.startswith("–¥–µ–Ω—å"):
            duration = number * 86400
        elif unit.startswith("–º–µ—Å—è—Ü"):
            duration = number * 30 * 86400
        elif unit.startswith("–≥–æ–¥"):
            duration = number * 365 * 86400
        else:
            duration = number * 60
        user_roles[target] = "banned"
        chat_ban_until[target] = time.time() + duration
        duration_text = f"{number} {unit}"
        bot.send_message(target, f"–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ '{reason}' –Ω–∞ {duration_text}.")
        bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ '{reason}' –Ω–∞ {duration_text}.")
        waiting_for_input.pop(user_id)
    elif action == "settings_unban":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            user_roles[target] = "user"
            bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        waiting_for_input.pop(user_id)
    elif action == "settings_reset":
        try:
            target = int(user_input)
            if target not in user_coins:
                bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                waiting_for_input.pop(user_id)
                return
            user_coins[target] = 0
            bot.send_message(user_id, f"–ö–æ–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} —Å–±—Ä–æ—à–µ–Ω—ã.")
        except ValueError:
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        waiting_for_input.pop(user_id)

# ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∫–æ–∏–Ω–æ–≤ ----------------
@bot.message_handler(func=lambda message: message.chat.id in waiting_for_transfer and "amount" not in waiting_for_transfer[message.chat.id])
def handle_transfer_amount(message):
    user_id = message.chat.id
    try:
        amount = int(message.text)
        if amount <= 0:
            bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
            return
        if user_coins[user_id] < amount:
            bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞!")
            waiting_for_transfer.pop(user_id, None)
            return
        waiting_for_transfer[user_id]["amount"] = amount
        target = waiting_for_transfer[user_id]["target"]
        sender_name = message.from_user.first_name or str(user_id)
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–º—É –∫–æ–∏–Ω—ã", callback_data=f"transfer_send_{user_id}"))
        markup.row(InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–∏–Ω—ã", callback_data=f"transfer_decline_{user_id}"))
        markup.row(InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ–º—É", callback_data=f"transfer_question_{user_id}"),
                   InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"transfer_accept_{user_id}"))
        bot.send_message(target, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_name} (ID: {user_id}) —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞–º {amount} –∫–æ–∏–Ω–æ–≤.", reply_markup=markup)
        bot.send_message(user_id, "–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# ---------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è ----------------
@bot.message_handler(func=lambda message: message.chat.id in waiting_for_transfer_question)
def handle_transfer_question(message):
    receiver_id = message.chat.id
    sender_id = waiting_for_transfer_question[receiver_id]
    question = message.text
    bot.send_message(sender_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {receiver_id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {question}")
    bot.send_message(receiver_id, "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    waiting_for_transfer_question.pop(receiver_id, None)

bot.polling()